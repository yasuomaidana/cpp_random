//
// Created by Yasuo Ignacio Maidana PÃ©rez on 25/10/24.
//
#include "gtest/gtest.h"
#include "../lib/fft_problem/fft.h"
// #include "matplotlibcpp.h"

using namespace std;

// namespace plt = matplotlibcpp;

TEST(TEST_FFT, Test1)
{
    const vector<double> data = {
        7, 83, 95, 100, 86, 94, 100, 100, 90, 78, 100, 82, 81, 81, 94, 78, 91, 100, 65, 80, 98, 83, 89, 68, 62, 53, 55,
        57, 66, 53, 70, 29, 66, 67, 49, 47, 12, 55, 51, 50, 39, 41, 35, 3, 10, 15, 0, 29, 0, 13, 0, 23, 16, 0, 0, 0, 0,
        0, 25, 0, 0, 9, 2, 19, 0, 3, 14, 26, 0, 0, 0, 26, 0, 26, 0, 0, 21, 9, 0, 21, 23, 9, 46, 33, 44, 14, 26, 66, 60,
        41, 67, 37, 59, 47, 49, 53, 54, 43, 53, 62, 55, 55, 64, 96, 96, 74, 95, 72, 97, 73, 93, 100, 74, 81, 100, 102,
        100, 86, 100, 85, 30, 100, 79, 100, 94, 86, 83, 100, 88, 100, 78, 99, 100, 78, 95, 69, 79, 80, 92, 73, 61, 79,
        49, 90, 48, 50, 38, 69, 38, 49, 50, 62, 52, 62, 35, 56, 20, 55, 35, 27, 16, 28, 0, 0, 14, 0, 30, 1, 21, 0, 2, 0,
        27, 0, 0, 0, 0, 0, 14, 15, 0, 17, 24, 23, 22, 0, 9, 20, 28, 22, 14, 11, 12, 6, 35, 0, 10, 33, 27, 0, 30, 4, 49,
        23, 37, 32, 25, 27, 58, 49, 24, 28, 70, 37, 45, 78, 49, 91, 61, 82, 93, 88, 100, 77, 65, 90, 87, 84, 81, 100,
        80, 81, 100, 100, 91, 78, 90, 88, 94, 87, 32, 100, 96, 100, 100, 100, 74, 100, 97, 93, 69, 91, 92, 76, 77, 77,
        73, 80, 65, 62, 95, 48, 65, 47, 53, 70, 70, 57, 46, 71, 42, 52, 35, 49, 51, 38, 30, 25, 47, 10, 6, 20, 25, 21,
        21, 0, 20, 2, 0, 29, 11, 0, 0, 21, 16, 1, 0, 11, 15, 0, 1, 16, 11, 24, 0, 19, 0, 5, 0, 0, 0, 9, 13, 8, 0, 5, 21,
        30, 38, 17, 41, 42, 52, 32, 34, 43, 57, 18, 60, 44, 56, 67, 58, 75, 53, 38, 47, 55, 54, 56, 95, 81, 100, 86, 77,
        100, 100, 100, 80, 76, 100, 84, 99, 74, 97, 84, 100, 96, 100, 94, 77, 100, 100, 95, 80, 88, 88, 87, 72, 100, 88,
        79, 97, 67, 100, 100, 90, 71, 54, 88, 72, 82, 87, 54, 61, 50, 51, 37, 78, 73, 72, 69, 57, 38, 36, 45, 39, 41,
        10, 21, 30, 30, 34, 31, 0, 27, 13, 27, 33, 0, 0, 19, 0, 0, 0, 0, 0, 3, 0, 0, 0, 18, 15, 13, 18, 0, 0, 25, 20,
        23, 0, 4, 21, 0, 0, 20, 31, 31, 3, 44, 19, 23, 33, 26, 11, 12, 46, 23, 48, 23, 34, 74, 59, 40, 43, 52, 59, 73,
        91, 81, 88, 60, 64, 77, 100, 71, 66, 97, 80, 79, 82, 77, 96, 100, 100, 75, 83, 100, 96, 98, 36, 100, 79, 97,
        100, 98, 95, 82, 78, 71, 88, 100, 69, 100, 84, 81, 62, 94, 85, 100, 78, 76, 46, 64, 71, 57, 70, 64, 43, 42, 43,
        51, 29, 26, 52, 43, 15, 23, 6, 42, 33, 32, 0, 15, 24, 0, 3, 0, 0, 2, 0, 0, 0, 11, 0, 0, 18, 0, 24, 11, 0, 0, 2,
        0, 17, 0, 0, 10, 0, 8, 0, 5, 11, 15, 16, 20, 22, 7, 4, 47, 3, 11, 49, 40, 27, 50, 37, 40, 51, 30, 30, 30, 34,
        49, 37, 68, 53, 91, 64, 82, 98, 94, 65, 59, 78, 100, 100, 63, 100, 73, 79, 74, 87, 76, 90, 100, 116, 81, 79,
        100, 82, 100, 100, 100, 92, 79, 100, 80, 100, 100, 73, 100, 76, 69, 98, 81, 88, 79, 84, 64, 84, 61, 57, 64, 76,
        65, 46, 70, 46, 54, 63, 53, 26, 60, 61, 42, 25, 31, 13, 28, 46, 5, 11, 17, 13, 23, 11, 13, 13, 0, 31, 17, 8, 4,
        0, 23, 0, 0, 24, 0, 23, 5, 0, 0, 23, 19, 0, 18, 26, 0, 2, 28, 29, 0, 0, 36, 22, 5, 6, 12, 6, 44, 51, 31, 35, 39,
        23, 25, 25, 27, 37, 28, 59, 34, 46, 52, 48, 51, 52, 50, 96, 59, 68, 78, 65, 100, 96, 75, 83, 100, 76, 118, 117,
        88, 100, 100, 97, 74, 100, 98, 76, 84, 100, 100, 100, 88, 91, 100, 98, 100
    };
    const vector<complex<double>> result = fft_real(data);
    constexpr int sampling_rate = 365;
    // vector<complex<double>> expected = {
    //     complex<double>(10, 0),
    //     complex<double>(-2, 2),
    //     complex<double>(-2, 0),
    //     complex<double>(-2, -2),
    // };
    // for (size_t i = 0; i < result.size(); ++i)
    // {
    //     EXPECT_NEAR(result[i].real(), expected[i].real(), 1e-9);
    //     EXPECT_NEAR(result[i].imag(), expected[i].imag(), 1e-9);
    // }
}


vector<complex<double>> fft(vector<int>& data)
{
    int n = data.size();
    // Base case
    if (n == 1)
    {
        return {complex<double>(data[0], 0)};
    }

    // Recursive step
    vector<int> even(n / 2), odd(n / 2);
    for (int i = 0; i < n / 2; ++i)
    {
        even[i] = data[2 * i];
        odd[i] = data[2 * i + 1];
    }

    vector<complex<double>> evenFFT = fft(even);
    vector<complex<double>> oddFFT = fft(odd);

    vector<complex<double>> result(n);
    for (int k = 0; k < n / 2; ++k)
    {
        complex<double> wk = polar(1.0, -2.0 * M_PI * k / n);
        result[k] = evenFFT[k] + wk * oddFFT[k];
        result[k + n / 2] = evenFFT[k] - wk * oddFFT[k];
    }

    return result;
}

TEST(TEST_FFT2, Test1)
{
    vector<int> data = {
        4, 462, 387, 364, 405, 230, 384, 121, 72, 17, 0, 45, 79, 0, 0, 0, 141, 66, 235, 210, 310, 286, 405, 394, 398, 500, 30, 500, 501, 362, 469, 258, 360, 181, 189, 55, 95, 102, 0, 13, 0, 0, 9, 146, 258, 108, 360, 234, 421, 500, 425, 374, 266, 500, 500, 465, 480, 310, 216, 258, 91, 185, 0, 85, 0, 100, 0, 23, 14, 4, 132, 202, 399, 309, 297, 371, 432, 500, 365, 500, 379, 414, 361, 400, 259, 222, 218, 106, 124, 42, 10, 53, 67, 31, 26, 82, 99, 322, 293, 456, 436, 500, 430, 412, 65, 371, 500, 500, 286, 367, 275, 344, 77, 58, 94, 0, 127, 18, 77, 120, 0, 94, 64, 296, 219, 249, 279, 490, 449, 500, 126, 390, 495, 525, 280, 225, 379, 235, 153, 212, 0, 0, 0, 9, 0, 0, 25, 206, 154, 103, 165, 241, 277, 376, 461, 491, 181, 473, 463, 500, 434, 397, 227, 341, 277, 205, 0, 0, 0, 0, 65, 0, 82, 212, 279, 341, 167, 440, 434, 500, 452, 500, 174, 500, 441, 417, 465, 233, 368, 150, 155, 72, 0, 139, 0, 58, 79, 56, 62, 204, 144, 126, 198, 437, 500, 500, 372, 495, 7, 500, 461, 500, 336, 337, 184, 275, 93, 132, 0, 0, 0, 0, 12, 57, 0, 24, 282, 337, 385, 294, 319, 492, 500, 451, 282, 486, 500, 361, 479, 429, 349, 252, 282, 74, 130, 40, 0, 0, 38, 2, 133, 0, 194, 240, 278, 341, 447, 485, 434, 500, 366, 500, 426, 477, 314, 286, 333, 306, 81, 134, 22, 0, 0, 0, 8, 0, 141, 10, 83, 190, 213, 375, 384, 413, 500, 500, 253, 498, 493, 429, 436, 277, 378, 275, 166, 153, 0, 104, 0, 53, 31, 112, 36, 139, 277, 327, 232, 338, 500, 493, 406, 376, 379, 500, 500, 420, 312, 385, 304, 191, 168, 145, 0, 0, 0, 11, 73, 80, 173, 195, 246, 235, 196, 328, 305, 500, 489, 421, 238, 500, 512, 500, 325, 459, 352, 183, 182, 102, 55, 38, 82, 0, 21, 0, 185, 216, 196, 332, 211, 271, 500, 500, 500, 379, 315, 384, 497, 377, 500, 339, 321, 307, 142, 0, 165, 0, 47, 120, 0, 41, 69, 119, 72, 340, 215, 320, 416, 397, 433, 500, 304, 403, 460, 498, 353, 337, 231, 328, 55, 193, 150, 0, 0, 0, 0, 0, 143, 81, 140, 192, 398, 230, 403, 410, 500, 408, 46, 475, 450, 500, 347, 302, 288, 146, 269, 87, 124, 0, 0, 22, 21, 0, 22, 80, 216, 146, 340, 419, 277, 499, 405, 497, 56, 500, 500, 464, 337, 237, 226, 123, 239, 10, 43, 0, 93, 0, 0, 0, 139, 227, 176, 128, 281, 382, 325, 390, 500, 500, 421, 484, 469, 500, 386, 331, 354, 237, 163, 49, 0, 50, 83, 0, 11, 3, 125, 209, 105, 252, 352, 417, 355, 451, 475, 468, 404, 400, 500, 365, 429, 389, 391, 220, 101, 168, 171, 94, 25, 77, 0, 5, 0, 67, 245, 211, 226, 415, 452, 481, 500, 370, 157, 434, 383, 481, 319, 424, 380, 223, 168, 162, 0, 111, 84, 33, 42, 27, 119, 131, 37, 193, 378, 230, 268, 475, 445, 428, 491, 522, 478, 449, 453, 345, 246, 239, 74, 95, 165, 0, 0, 0, 0, 111, 52, 19, 207, 234, 391, 349, 306, 500, 392, 467, 406, 500, 500, 381, 500, 384, 317, 142, 225, 218, 0, 0, 125, 0, 68, 149, 0, 52, 277, 313, 225, 385, 279, 498, 497, 438, 338, 384, 500, 421, 496, 438, 293, 299, 175, 209, 36, 98, 0, 89, 0, 134, 81, 231, 99, 105, 270, 401, 415, 354, 415, 500, 381, 500, 442, 500, 398, 394, 207, 174, 220, 48, 168, 0, 0, 87, 12, 0, 6, 36, 274, 121, 193, 244, 408, 315, 500, 516, 8, 489, 500, 341, 276, 337, 290, 160, 73, 0, 80, 18, 0, 0, 109, 0, 116, 217, 219, 318, 196, 244, 416, 408, 482, 494, 212, 500, 500, 389, 459, 383, 386, 159, 93, 119, 5, 0, 41, 0, 0, 0, 128, 198, 260, 271, 214, 410, 301, 500, 475, 437, 227, 500, 465, 480, 397, 394, 156, 267, 263, 58, 73, 0, 12, 124, 4, 15, 128, 117, 136, 126, 292, 375, 497, 451, 500, 500, 306, 414
    };

    vector<complex<double>> fftResult = fft(data);

    double Fs = 1.0/86400;
    size_t n = fftResult.size();

    // Create frequency axis
    std::vector<double> frequencies(n);
    for (size_t i = 0; i < n; ++i) {
        frequencies[i] = (double)i * Fs / n;
    }

    double dc_component = sqrt(fftResult[0].real());
    std::cout << "DC Component: " << dc_component << std::endl;
    size_t fundamental_index = 1; // Start from 1 to skip DC
    for (size_t i = 2; i < n / 2; ++i) { // Only search up to n/2 (Nyquist)
        if (abs(fftResult[i].real()) > abs(fftResult[fundamental_index].real())) {
            fundamental_index = i;
        }
    }

    double fundamental_frequency = frequencies[fundamental_index];
    double fundamental_magnitude = sqrt(fftResult[fundamental_index].real());

    cout << "Fundamental Frequency: " << 1/fundamental_frequency /3600.0/24.0 << " Days" << std::endl;
    cout << "Fundamental Magnitude: " << fundamental_magnitude << std::endl;

    // cout << "FFT Result:" << endl;
    // string magnitude = "magnitude = [";
    // string period = "period = [";
    // for (int k = 0; k < fftResult.size(); ++k)
    // {
    //     // Calculate magnitude and period
    //
    //     double magnitude_val = sqrt(abs(fftResult[k]));
    //     double period_val = (k == 0) ? INFINITY : fftResult.size() / k;
    //     // if (period < 365)
    //     magnitude += to_string(magnitude_val) + ", ";
    //     period += to_string(period_val) + ", ";
    // }
    // magnitude += "]";
    // period += "]";
    // cout << magnitude << endl;
    // cout << period << endl;
    //
    // double max_magnitude = 0;
    // int fundamental_k = 0;
    // for (int k = 1; k < fftResult.size(); ++k)
    // {
    //     double magnitude = sqrt(abs(fftResult[k]));
    //     if (magnitude > max_magnitude)
    //     {
    //         max_magnitude = magnitude;
    //         fundamental_k = k;
    //     }
    // }
    // // Calculate frequency in cycles per day
    // int sampling_rate = 1; // 1 sample per day
    // double fundamental_frequency = sampling_rate * fundamental_k / fftResult.size();
    // // Convert to cycles per year
    // double fundamental_frequency_year = fundamental_frequency * 365;
    // double fundamental_amplitude = max_magnitude;
    //
    // cout << "Fundamental Frequency (cycles/day): " << fundamental_frequency << endl;
    // cout << "Fundamental Frequency (cycles/year): " << fundamental_frequency_year << endl;
    // cout << "Fundamental Amplitude: " << fundamental_amplitude << endl;


        // vector<double> magnitudes;
        // for (const auto& val : fftResult) {
        //     magnitudes.push_back(abs(val));
        // }

        // plt::plot(magnitudes);
        // plt::title("FFT Magnitudes");
        // plt::show();
    }
