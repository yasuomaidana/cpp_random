//
// Created by Yasuo Ignacio Maidana PÃ©rez on 25/10/24.
//
#include "gtest/gtest.h"
#include "../lib/fft_problem/fft.h"
#include "../lib/fft_problem/sales_analyzer.h"
// #include "matplotlibcpp.h"

using namespace std;

// namespace plt = matplotlibcpp;

// TEST(TEST_FFT, Test1)
// {
//     const vector<double> data = {
//         7, 83, 95, 100, 86, 94, 100, 100, 90, 78, 100, 82, 81, 81, 94, 78, 91, 100, 65, 80, 98, 83, 89, 68, 62, 53, 55,
//         57, 66, 53, 70, 29, 66, 67, 49, 47, 12, 55, 51, 50, 39, 41, 35, 3, 10, 15, 0, 29, 0, 13, 0, 23, 16, 0, 0, 0, 0,
//         0, 25, 0, 0, 9, 2, 19, 0, 3, 14, 26, 0, 0, 0, 26, 0, 26, 0, 0, 21, 9, 0, 21, 23, 9, 46, 33, 44, 14, 26, 66, 60,
//         41, 67, 37, 59, 47, 49, 53, 54, 43, 53, 62, 55, 55, 64, 96, 96, 74, 95, 72, 97, 73, 93, 100, 74, 81, 100, 102,
//         100, 86, 100, 85, 30, 100, 79, 100, 94, 86, 83, 100, 88, 100, 78, 99, 100, 78, 95, 69, 79, 80, 92, 73, 61, 79,
//         49, 90, 48, 50, 38, 69, 38, 49, 50, 62, 52, 62, 35, 56, 20, 55, 35, 27, 16, 28, 0, 0, 14, 0, 30, 1, 21, 0, 2, 0,
//         27, 0, 0, 0, 0, 0, 14, 15, 0, 17, 24, 23, 22, 0, 9, 20, 28, 22, 14, 11, 12, 6, 35, 0, 10, 33, 27, 0, 30, 4, 49,
//         23, 37, 32, 25, 27, 58, 49, 24, 28, 70, 37, 45, 78, 49, 91, 61, 82, 93, 88, 100, 77, 65, 90, 87, 84, 81, 100,
//         80, 81, 100, 100, 91, 78, 90, 88, 94, 87, 32, 100, 96, 100, 100, 100, 74, 100, 97, 93, 69, 91, 92, 76, 77, 77,
//         73, 80, 65, 62, 95, 48, 65, 47, 53, 70, 70, 57, 46, 71, 42, 52, 35, 49, 51, 38, 30, 25, 47, 10, 6, 20, 25, 21,
//         21, 0, 20, 2, 0, 29, 11, 0, 0, 21, 16, 1, 0, 11, 15, 0, 1, 16, 11, 24, 0, 19, 0, 5, 0, 0, 0, 9, 13, 8, 0, 5, 21,
//         30, 38, 17, 41, 42, 52, 32, 34, 43, 57, 18, 60, 44, 56, 67, 58, 75, 53, 38, 47, 55, 54, 56, 95, 81, 100, 86, 77,
//         100, 100, 100, 80, 76, 100, 84, 99, 74, 97, 84, 100, 96, 100, 94, 77, 100, 100, 95, 80, 88, 88, 87, 72, 100, 88,
//         79, 97, 67, 100, 100, 90, 71, 54, 88, 72, 82, 87, 54, 61, 50, 51, 37, 78, 73, 72, 69, 57, 38, 36, 45, 39, 41,
//         10, 21, 30, 30, 34, 31, 0, 27, 13, 27, 33, 0, 0, 19, 0, 0, 0, 0, 0, 3, 0, 0, 0, 18, 15, 13, 18, 0, 0, 25, 20,
//         23, 0, 4, 21, 0, 0, 20, 31, 31, 3, 44, 19, 23, 33, 26, 11, 12, 46, 23, 48, 23, 34, 74, 59, 40, 43, 52, 59, 73,
//         91, 81, 88, 60, 64, 77, 100, 71, 66, 97, 80, 79, 82, 77, 96, 100, 100, 75, 83, 100, 96, 98, 36, 100, 79, 97,
//         100, 98, 95, 82, 78, 71, 88, 100, 69, 100, 84, 81, 62, 94, 85, 100, 78, 76, 46, 64, 71, 57, 70, 64, 43, 42, 43,
//         51, 29, 26, 52, 43, 15, 23, 6, 42, 33, 32, 0, 15, 24, 0, 3, 0, 0, 2, 0, 0, 0, 11, 0, 0, 18, 0, 24, 11, 0, 0, 2,
//         0, 17, 0, 0, 10, 0, 8, 0, 5, 11, 15, 16, 20, 22, 7, 4, 47, 3, 11, 49, 40, 27, 50, 37, 40, 51, 30, 30, 30, 34,
//         49, 37, 68, 53, 91, 64, 82, 98, 94, 65, 59, 78, 100, 100, 63, 100, 73, 79, 74, 87, 76, 90, 100, 116, 81, 79,
//         100, 82, 100, 100, 100, 92, 79, 100, 80, 100, 100, 73, 100, 76, 69, 98, 81, 88, 79, 84, 64, 84, 61, 57, 64, 76,
//         65, 46, 70, 46, 54, 63, 53, 26, 60, 61, 42, 25, 31, 13, 28, 46, 5, 11, 17, 13, 23, 11, 13, 13, 0, 31, 17, 8, 4,
//         0, 23, 0, 0, 24, 0, 23, 5, 0, 0, 23, 19, 0, 18, 26, 0, 2, 28, 29, 0, 0, 36, 22, 5, 6, 12, 6, 44, 51, 31, 35, 39,
//         23, 25, 25, 27, 37, 28, 59, 34, 46, 52, 48, 51, 52, 50, 96, 59, 68, 78, 65, 100, 96, 75, 83, 100, 76, 118, 117,
//         88, 100, 100, 97, 74, 100, 98, 76, 84, 100, 100, 100, 88, 91, 100, 98, 100
//     };
//     const vector<complex<double>> result = fft_real(data);
//     constexpr int sampling_rate = 365;
//     // vector<complex<double>> expected = {
//     //     complex<double>(10, 0),
//     //     complex<double>(-2, 2),
//     //     complex<double>(-2, 0),
//     //     complex<double>(-2, -2),
//     // };
//     // for (size_t i = 0; i < result.size(); ++i)
//     // {
//     //     EXPECT_NEAR(result[i].real(), expected[i].real(), 1e-9);
//     //     EXPECT_NEAR(result[i].imag(), expected[i].imag(), 1e-9);
//     // }
// }


vector<complex<double>> fft(vector<int>& data)
{
    int n = data.size();
    // Base case
    if (n == 1)
    {
        return {complex<double>(data[0], 0)};
    }

    // Recursive step
    vector<int> even(n / 2), odd(n / 2);
    for (int i = 0; i < n / 2; ++i)
    {
        even[i] = data[2 * i];
        odd[i] = data[2 * i + 1];
    }

    vector<complex<double>> evenFFT = fft(even);
    vector<complex<double>> oddFFT = fft(odd);

    vector<complex<double>> result(n);
    for (int k = 0; k < n / 2; ++k)
    {
        complex<double> wk = polar(1.0, -2.0 * M_PI * k / n);
        result[k] = evenFFT[k] + wk * oddFFT[k];
        result[k + n / 2] = evenFFT[k] - wk * oddFFT[k];
    }

    return result;
}

void show_result(vector<tuple<string,array<int,3>>> results)
{
    string final_result = "[";
    for (size_t i = 0; i < results.size(); ++i)
    {
        final_result += "('" + get<0>(results[i]) + "', [";
        final_result += to_string(get<1>(results[i])[0]) + ", ";
        final_result += to_string(get<1>(results[i])[1]) + ", ";
        final_result += to_string(get<1>(results[i])[2]) + "])";
        if (i < results.size() - 1)
        {
            final_result += ", ";
        }
    }
    final_result += "]";
    cout << final_result << endl;
}
TEST(TEST_FFT1, Test1)
{
    const vector<vector<double>> data = {{
        431, 500, 488, 403, 424, 213, 248, 140, 167, 0, 140, 0, 65, 0, 16, 114, 103, 84, 285, 233, 363, 351, 481, 324, 500, 500, 299, 372, 500, 473, 293, 222, 218, 195, 212, 95, 115, 0, 0, 0, 79, 0, 29, 91, 241, 212, 294, 240, 494, 438, 352, 411, 18, 500, 378, 361, 350, 421, 363, 334, 167, 209, 150, 119, 99, 0, 111, 79, 6, 110, 272, 152, 375, 388, 403, 460, 451, 500, 118, 464, 372, 340, 271, 249, 377, 176, 42, 35, 149, 94, 0, 62, 0, 75, 121, 85, 166, 311, 375, 358, 297, 350, 500, 473, 38, 465, 424, 418, 483, 302, 349, 163, 273, 56, 0, 132, 124, 0, 12, 32, 125, 5, 215, 161, 310, 325, 364, 500, 363, 500, 403, 500, 400, 406, 332, 355, 346, 117, 243, 188, 69, 0, 83, 109, 132, 137, 0, 24, 285, 276, 176, 421, 369, 442, 500, 425, 381, 500, 438, 489, 290, 445, 365, 307, 234, 17, 92, 0, 0, 80, 0, 0, 131, 0, 168, 176, 326, 405, 290, 500, 432, 448, 262, 396, 434, 339, 274, 399, 334, 219, 202, 129, 125, 105, 0, 63, 120, 0, 182, 188, 118, 322, 262, 318, 420, 421, 500, 440, 184, 488, 500, 500, 438, 348, 281, 330, 124, 28, 87, 0, 0, 85, 116, 41, 25, 150, 177, 302, 322, 428, 288, 500, 500, 476, 325, 500, 500, 534, 399, 226, 210, 343, 191, 35, 0, 0, 0, 116, 79, 55, 58, 25, 278, 202, 249, 308, 470, 500, 500, 481, 247, 465, 498, 375, 452, 216, 366, 298, 108, 72, 111, 127, 8, 40, 17, 0, 187, 147, 243, 332, 176, 256, 397, 352, 401, 500, 304, 500, 455, 500, 446, 315, 338, 267, 205, 159, 2, 93, 0, 32, 26, 0, 0, 8, 123, 103, 353, 270, 468, 470, 450, 500, 80, 434, 490, 437, 279, 292, 196, 183, 150, 33, 73, 0, 33, 0, 65, 0, 163, 132, 65, 109, 318, 308, 406, 500, 427, 402, 287, 423, 472, 408, 359, 223, 340, 310, 59, 172, 40, 26, 0, 0, 0, 66, 100, 27, 228, 284, 391, 240, 353, 452, 495, 373, 86, 500, 513, 454, 292, 250, 349, 295, 54, 223, 0, 56, 56, 0, 45, 0, 88, 123, 55, 181, 166, 356, 279, 500, 411, 500, 9, 447, 493, 464, 391, 302, 403, 312, 142, 207, 141, 0, 2, 60, 7, 0, 0, 96, 193, 315, 392, 339, 296, 442, 500, 500, 342, 422, 500, 360, 413, 267, 349, 190, 47, 119, 100, 0, 120, 95, 0, 124, 0, 47, 58, 276, 282, 237, 500, 344, 367, 379, 466, 428, 366, 500, 318, 280, 325, 145, 129, 147, 75, 0, 0, 74, 111, 0, 104, 2, 75, 189, 236, 435, 426, 500, 529, 500, 14, 418, 477, 369, 328, 303, 352, 136, 235, 155, 153, 12, 50, 93, 12, 0, 75, 166, 139, 175, 316, 265, 442, 500, 500, 477, 61, 500, 558, 332, 281, 257, 205, 131, 58, 203, 169, 118, 0, 32, 0, 0, 0, 0, 207, 159, 206, 219, 282, 516, 423, 431, 4, 498, 500, 500, 509, 340, 323, 283, 108, 12, 68, 0, 0, 0, 119, 12, 30, 0, 180, 202, 260, 287, 329, 477, 426, 423, 312, 500, 500, 416, 477, 274, 193, 343, 97, 217, 115, 44, 0, 18, 0, 0, 95, 90, 206, 210, 169, 394, 279, 435, 500, 415, 3, 500, 500, 474, 323, 257, 382, 232, 108, 68, 30, 136, 42, 48, 7, 0, 134, 194, 87, 175, 358, 434, 404, 344, 353, 392, 59, 500, 435, 337, 446, 423, 345, 167, 86, 0, 0, 0, 26, 41, 92, 0, 131, 39, 274, 237, 309, 449, 396, 500, 476, 500, 436, 376, 498, 439, 291, 360, 189, 221, 170, 143, 29, 0, 63, 115, 0, 142, 90, 90, 220, 301, 328, 336, 346, 352, 500, 490, 187, 500, 420, 395, 444, 382, 233, 197, 42, 140, 36, 0, 69, 0, 111, 0, 155, 76, 53, 327, 313, 386, 401, 404, 433, 374, 384, 367, 386, 457, 476, 345, 252, 173, 60, 217, 131, 0, 54, 0, 26, 84, 0, 74, 186, 170, 382, 270, 372, 500, 359, 500, 254, 403, 362, 369, 403, 256, 380, 263, 135, 38, 96, 0, 43, 59, 114, 0, 83, 206, 275, 289, 332, 447, 382, 500, 500, 500, 288, 438
    }};
    vector<string> products = {"potato"};
    // vector<complex<double>> fftResult = fft_real(data);
    auto result = sales_analyzer(data,products);
    string expected_result = "potato";
    int expected_days = 5;
    EXPECT_EQ(result.size(),1);
    const auto result_item = result.at(0);

    EXPECT_LE(get<1>(result_item)[2],expected_days+1);
    EXPECT_GE(get<1>(result_item)[2],expected_days-1);
    EXPECT_LE(get<1>(result_item)[1],expected_days+1);
    EXPECT_EQ(get<1>(result_item)[0],0);
    cout << "TEST 1";
    show_result(result);
}


TEST(TEST_FFT2, Test2)
{
    const vector<vector<double>> data = {{55, 398, 412, 500, 500, 460, 473, 433, 476, 380, 612, 404, 489, 463, 500, 500, 454, 446, 382, 461, 427, 500, 434, 426, 500, 444, 404, 458, 500, 400, 500, 355, 500, 443, 500, 488, 500, 500, 332, 500, 500, 373, 371, 335, 500, 453, 332, 500, 425, 500, 350, 500, 411, 322, 408, 533, 500, 423, 294, 442, 499, 377, 469, 390, 393, 360, 292, 334, 397, 360, 378, 461, 408, 239, 291, 238, 324, 431, 420, 411, 350, 304, 242, 318, 332, 324, 426, 360, 213, 370, 237, 301, 267, 214, 261, 215, 347, 200, 241, 297, 132, 346, 213, 148, 284, 350, 345, 276, 208, 226, 163, 199, 183, 175, 218, 142, 254, 226, 290, 249, 193, 99, 160, 37, 249, 190, 136, 227, 92, 69, 45, 68, 59, 48, 64, 0, 55, 74, 229, 78, 62, 40, 0, 0, 168, 208, 198, 0, 203, 106, 0, 0, 146, 0, 0, 157, 149, 0, 0, 65, 84, 92, 0, 119, 162, 0, 67, 0, 103, 111, 0, 135, 0, 0, 57, 116, 0, 85, 0, 0, 30, 15, 0, 0, 0, 0, 0, 0, 0, 61, 0, 75, 36, 28, 0, 88, 25, 0, 42, 39, 0, 79, 28, 0, 123, 0, 84, 64, 85, 18, 0, 124, 0, 66, 92, 0, 0, 53, 8, 4, 0, 66, 1, 62, 94, 0, 92, 0, 91, 63, 80, 0, 34, 125, 118, 154, 0, 117, 0, 153, 110, 74, 0, 82, 0, 0, 72, 75, 84, 47, 0, 53, 157, 126, 144, 63, 117, 13, 35, 38, 167, 153, 191, 122, 90, 140, 70, 128, 151, 114, 172, 172, 63, 244, 171, 229, 47, 123, 175, 241, 200, 158, 69, 137, 82, 290, 272, 100, 131, 171, 335, 231, 306, 206, 243, 328, 304, 255, 360, 252, 344, 359, 179, 301, 196, 311, 298, 330, 397, 256, 361, 213, 360, 363, 322, 388, 403, 317, 261, 290, 387, 270, 413, 428, 418, 378, 328, 233, 332, 386, 238, 426, 297, 303, 284, 277, 450, 301, 432, 462, 349, 500, 339, 307, 464, 332, 536, 367, 412, 359, 489, 393, 412, 500, 459, 448, 499, 500, 536, 500, 475, 343, 500, 433, 500, 500, 475, 494, 500, 387, 388, 377, 492, 469, 448, 500, 500, 405, 500, 500, 461, 406, 500, 500, 500, 500, 500, 388, 425, 446, 500, 470, 500, 417, 380, 500, 500, 394, 500, 500, 417, 534, 443, 449, 431, 445, 500, 488, 489, 373, 512, 423, 437, 500, 500, 500, 475, 421, 500, 409, 500, 455, 500, 445, 498, 500, 500, 500, 500, 500, 500, 500, 498, 500, 500, 500, 489, 494, 380, 468, 419, 500, 500, 500, 396, 433, 397, 317, 360, 445, 500, 408, 500, 376, 343, 500, 409, 287, 319, 451, 509, 270, 500, 417, 271, 391, 498, 456, 320, 344, 401, 350, 311, 446, 229, 220, 357, 226, 254, 303, 285, 423, 353, 311, 225, 414, 315, 420, 320, 316, 295, 176, 278, 154, 217, 217, 252, 345, 379, 370, 337, 225, 124, 120, 138, 278, 228, 221, 310, 176, 215, 273, 189, 170, 253, 108, 209, 106, 238, 168, 173, 289, 161, 265, 199, 263, 92, 251, 210, 20, 58, 167, 48, 170, 62, 7, 58, 101, 33, 83, 168, 174, 41, 78, 163, 57, 100, 84, 74, 0, 35, 0, 138, 150, 138, 136, 165, 82, 0, 69, 0, 0, 58, 0, 0, 52, 157, 2, 86, 149, 0, 105, 75, 81, 59, 0, 23, 98, 65, 0, 0, 0, 0, 0, 0, 72, 69, 0, 33, 41, 0, 59, 0, 0, 110, 0, 88, 0, 0, 0, 0, 55, 67, 0, 0, 0, 0, 0, 53, 6, 0, 0, 0, 0, 122, 0, 57, 51, 0, 0, 62, 132, 44, 138, 0, 0, 28, 15, 0, 0, 15, 0, 0, 25, 0, 150, 0, 43, 114, 0, 24, 53, 153, 97, 51, 174, 0, 96, 96, 0, 166, 0, 122, 0, 8, 86, 0, 207, 188, 73, 112, 164, 18, 62, 240, 66, 57, 55, 184, 71, 211, 54, 42, 200, 175, 249, 229, 37, 136, 262, 136, 163, 200, 109, 140, 113, 193, 299, 324, 113, 226, 294, 102, 131, 320, 207, 214, 172, 248, 255, 295, 326, 155, 358, 377, 315, 338, 326, 328, 391, 229, 217, 208, 390, 380, 338, 233, 230, 236, 296, 345, 440, 339, 311, 360, 325, 391, 264, 310, 330}};

    vector<string> products = {"potato"};
    // vector<complex<double>> fftResult = fft_real(data);
    auto result = sales_analyzer(data,products);
    string expected_result = "potato";
    int expected_days = 5;
    EXPECT_EQ(result.size(),0);
    // const auto result_item = result.at(0);
    //
    // EXPECT_LE(get<1>(result_item)[2],expected_days+1);
    // EXPECT_GE(get<1>(result_item)[2],expected_days-1);
    // EXPECT_LE(get<1>(result_item)[1],expected_days+1);
    // EXPECT_EQ(get<1>(result_item)[0],0);
    cout << "TEST 2";
    show_result(result);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
